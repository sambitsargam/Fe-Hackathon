const USER_COUNT: u256 = 2;

struct Entry {
    pub participant: address,
    pub choice: Array<u8, USER_COUNT>,
}

struct ChooseWinner {
    pub x: u8,
}

struct Random {
    pub randomiser: address,
}

struct WaitLonger {}

contract CoinFlip {
    randomiser: address;
    possible: u8;
    game_duration: u256;
    entry_price: u256;
    fee_recipient: address;

    jackpot: u256;
    games_count: u256;
    game_request_id: Map<u256, u256>;
    game_seed: Map<u256, u256>;
    game_finalised: Map<u256, u256>;
    game_claimant: Map<u256, address>;  // Changed to `game_claimant`
    entries_count: Map<u256, u256>;
    entries: Map<u256, Map<u256, Entry>>;

    pub fn randomiser(self) -> address { return self.randomiser; }
    pub fn games_count(self) -> u256 { return self.games_count; }
    pub fn game_seed(self, game_num: u256) -> u256 { return self.game_seed[game_num]; }
    pub fn entries_count(self, game_num: u256) -> u256 { return self.entries_count[game_num]; }
    pub fn entries(self, game_num: u256, entry_num: u256) -> Entry { return self.entries[game_num][entry_num].to_mem(); }
    pub fn game_duration(self) -> u256 { return self.game_duration; }
    pub fn game_finalised(self, game_num: u256) -> u256 { return self.game_finalised[game_num]; }
    pub fn game_claimant(self, game_num: u256) -> address { return self.game_claimant[game_num]; }  // Changed to `game_claimant`
    pub fn entry_price(self) -> u256 { return self.entry_price; }
    pub fn jackpot(self) -> u256 { return self.jackpot; }
    pub fn fee_recipient(self) -> address { return self.fee_recipient; }

    /// @notice Constructor
    pub fn __init__(
        mut self,
        ctx: Context,
        randomiser: address,
        possible: u8,
        game_duration: u256,
        entry_price: u256,
        fee_recipient: address,
    ) {
        self.randomiser = randomiser;
        self.possible = possible;
        self.game_duration = game_duration;
        self.entry_price = entry_price;
        self.fee_recipient = fee_recipient;
        self.games_count = 1;
        self.game_finalised[0] = ctx.block_timestamp();
    }

    /// @notice Enter the next CoinFlip game with a choice of 2 numbers
    /// @param choice User's choice
    pub fn enter(mut self, ctx: Context, choice: Array<u8, { USER_COUNT }>) {
        let msg_value: u256 = ctx.msg_value();
        assert msg_value == self.entry_price;
        let g: u256 = self.games_count;
        let e: u256 = self.entries_count[g];
        self.entries_count[g] += 1;
        let mut p: u256 = 0;
        while p < USER_COUNT {
            if choice[p] >= self.possible {
                revert ChooseWinner(x: choice[p]);
            }
            p += 1;
        }
        self.entries[g][e] = Entry(participant: ctx.msg_sender(), choice);
        let half_price_rounded: u256 = msg_value / 2;
        self.jackpot += half_price_rounded;
        let mut buf: RawCallBuffer = RawCallBuffer::new(input_len: 0, output_len: 0);
        assert ctx.raw_call(addr: self.fee_recipient, value: msg_value - half_price_rounded, buf);
    }

    /// @notice Computes the winning choice using a shuffling algorithm
    pub fn compute_winning_choice(self, game_num: u256) -> Array<u8, { USER_COUNT }> {
        assert self.game_seed[game_num] != 0;
        assert self.game_finalised[game_num] > 0;

        let mut winning_choice: Array<u8, { USER_COUNT }> = [0; USER_COUNT];
        let mut x: u256 = 0;
        while x < USER_COUNT {
            let x_prime: u256 = encrypt(x, self.possible, self.game_seed[game_num], 6);
            winning_choice[x] = u8(x_prime);
            x += 1;
        }

        return winning_choice;
    }

    /// @notice Claim winnings for a previous round
    pub fn claim(mut self, ctx: Context, entry_num: u256) {
        let prev_game_num: u256 = self.games_count - 1;
        assert entry_num < self.entries_count[prev_game_num];

        assert self.game_claimant[prev_game_num] == 0;
        let caller: address = ctx.msg_sender();
        self.game_claimant[prev_game_num] = caller;

        let entry: Entry = self.entries[prev_game_num][entry_num].to_mem();
        assert entry.participant == caller;
        assert is_multiset_eq(
            self.compute_winning_choice(game_num: prev_game_num),
            entry.choice,
            self.game_seed[prev_game_num],
        );
        let mut buf: RawCallBuffer = RawCallBuffer::new(input_len: 0, output_len: 0);
        assert ctx.raw_call(addr: caller, value: self.jackpot, buf);
    }

    /// @notice Close the current game & draw a number from the randomizer
    pub fn draw(mut self, ctx: Context) {
        let expected_deadline: u256 = self.game_finalised[self.games_count - 1] + self.game_duration;
        if ctx.block_timestamp() < expected_deadline {
            revert WaitLonger();
        }

        let request_id: u256 = Randomiser(self.randomiser).getRandomNumber(
            ctx.self_address(),
            500_000,
            4
        );
        self.game_request_id[request_id] = self.games_count;
        self.games_count += 1;
    }

    /// @notice Callback function for receiving a random word from the randomizer
    pub fn receiveRandomWord(mut self, ctx: Context, request_id: u256, random_word: u256) {
        if ctx.msg_sender() != self.randomiser {
            revert Random(randomiser: ctx.msg_sender());
        }

        let game_num: u256 = self.game_request_id[request_id];
        self.game_seed[game_num] = random_word;

        self.game_finalised[game_num] = ctx.block_timestamp();
    }
}

contract Randomiser {
    /// @notice Placeholder function to be implemented by the actual randomizer contract
    pub fn getRandomNumber(
        self,
        _ callbackContract: address,
        _ callbackGasLimit: u32,
        _ minConfirmations: u16
    ) -> u256 {
        revert;
    }
}
